"0","# We want to minimize the cost function. Then derivate this funcion"
"0","TestGradientDescent <- function(iterations = 1000, X, Y) {"
"0","  "
"0","  # Initialize (b, W)"
"0","  parameters <- rep(0, ncol(X))"
"0","  # Check evolution"
"0","  print(paste(""Initial Cost Function value: "", "
"0","              convergence <- c(CostFunction(parameters, X, Y)), sep = """"))"
"0","  "
"0","  # updating (b, W) using gradient update"
"0","  "
"0","  # Derive theta using gradient descent using optim function"
"0","  # Look for information about the ""optim"" function (there are other options)"
"0","  parameters_optimization <- optim(par = parameters, fn = CostFunction, X = X, Y = Y, "
"0","                                   control = list(maxit = iterations))"
"0","  #set parameters"
"0","  parameters <- parameters_optimization$par"
"0","  "
"0","  # Check evolution"
"0","  print(paste(""Final Cost Function value: "", "
"0","              convergence <- c(CostFunction(parameters, X, Y)), sep = """"))"
"0"," return(parameters) "
"0","}"
"0","# How to use"
"0","parameters <- TestGradientDescent(X = X, Y = Y)"
"1","[1]"
"1"," ""Initial Cost Function value: 0.693147180559945"""
"1","
"
"1","[1]"
"1"," ""Final Cost Function value: 0.203497704580909"""
"1","
"
"0","# probability of admission for student (1 = b, for the calculos)"
"0","new_student <- c(1,25,78)"
"0","print(""Probability of admission for student:"")"
"1","[1]"
"1"," ""Probability of admission for student:"""
"1","
"
"0","print(prob_new_student <- Sigmoid(t(new_student) %*% parameters))"
"1","    "
"1","       [,1]"
"1","
[1,]"
"1"," 0.01350584"
"1","
"
